/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Mon Feb 12 13:43:56 2024


#ifndef FAKEIMU_PARAMSPARSER_H
#define FAKEIMU_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class FakeIMU.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units       | Default Value | Required | Description                                                                                                     | Notes |
* |:----------:|:--------------:|:------:|:-----------:|:-------------:|:--------:|:---------------------------------------------------------------------------------------------------------------:|:-----:|
* | -          | period         | int    | millisecond | 10            | 0        | Period over which the measurement is updated.                                                                   | -     |
* | -          | constantValue  | bool   | -           | false         | 0        | If the parameter is present, the fake sensor values never changes (useful for testing server/client coherence). | -     |
* | -          | sensorName     | string | -           | sensorName    | 0        | Name of the sensor                                                                                              | -     |
*
* The device can be launched by yarpdev using one of the following examples:
* \code{.unparsed}
* yarpdev --device FakeIMU --period 10 --constantValue false --sensorName sensorName
* \endcode
*
* \code{.unparsed}
* yarpdev --device FakeIMU
* \endcode
*
*/

class FakeIMU_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    FakeIMU_ParamsParser() = default;
    ~FakeIMU_ParamsParser() override = default;

public:
    const std::string m_device_type = {"FakeIMU"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};
    int m_period = {10};
    bool m_constantValue = {false};
    std::string m_sensorName = {"sensorName"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceType() const override { return m_device_type; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
