/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Wed Feb  7 16:19:38 2024


#include "TestDeviceWGP_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(TestDeviceWGPParamsCOMPONENT, "yarp.device.TestDeviceWGP")
}


std::vector<std::string> TestDeviceWGP_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("file_name");
    params.push_back("mode");
    params.push_back("add_marker");
    params.push_back("group1::param_a");
    params.push_back("group2::param_a");
    params.push_back("period");
    params.push_back("initial_ref");
    params.push_back("group3::subgroup1::param_1");
    params.push_back("group3::subgroup1::param_2");
    params.push_back("group3::param_3");
    params.push_back("group3::subgroup2::param_4");
    return params;
}


bool      TestDeviceWGP_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(TestDeviceWGPParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter file_name
    {
        if (config.check("file_name"))
        {
            m_file_name = config.find("file_name").asString();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'file_name' using value:" << m_file_name;
        }
        else
        {
            yCError(TestDeviceWGPParamsCOMPONENT) << "Mandatory parameter 'file_name' not found!";
            yCError(TestDeviceWGPParamsCOMPONENT) << "Description of the parameter: The name of the file written by the module";
            return false;
        }
        prop_check.unput("file_name");
    }

    //Parser of parameter mode
    {
        if (config.check("mode"))
        {
            m_mode = config.find("mode").asString();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'mode' using value:" << m_mode;
        }
        else
        {
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'mode' using DEFAULT value:" << m_mode;
        }
        prop_check.unput("mode");
    }

    //Parser of parameter add_marker
    {
        if (config.check("add_marker"))
        {
            m_add_marker = config.find("add_marker").asBool();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'add_marker' using value:" << m_add_marker;
        }
        else
        {
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'add_marker' using DEFAULT value:" << m_add_marker;
        }
        prop_check.unput("add_marker");
    }

    //Parser of parameter group1::param_a
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("group1");
        if (sectionp.check("param_a"))
        {
            m_group1_param_a = sectionp.find("param_a").asBool();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group1::param_a' using value:" << m_group1_param_a;
        }
        else
        {
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group1::param_a' using DEFAULT value:" << m_group1_param_a;
        }
        prop_check.unput("group1::param_a");
    }

    //Parser of parameter group2::param_a
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("group2");
        if (sectionp.check("param_a"))
        {
            m_group2_param_a = sectionp.find("param_a").asBool();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group2::param_a' using value:" << m_group2_param_a;
        }
        else
        {
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group2::param_a' using DEFAULT value:" << m_group2_param_a;
        }
        prop_check.unput("group2::param_a");
    }

    //Parser of parameter period
    {
        if (config.check("period"))
        {
            m_period = config.find("period").asFloat64();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'period' using value:" << m_period;
        }
        else
        {
            yCError(TestDeviceWGPParamsCOMPONENT) << "Mandatory parameter 'period' not found!";
            yCError(TestDeviceWGPParamsCOMPONENT) << "Description of the parameter: Algorithm control loop period";
            yCError(TestDeviceWGPParamsCOMPONENT) << "Remember: Units for this parameter are: 's'";
            return false;
        }
        prop_check.unput("period");
    }

    //Parser of parameter initial_ref
    {
        if (config.check("initial_ref"))
        {
            m_initial_ref = config.find("initial_ref").asFloat64();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'initial_ref' using value:" << m_initial_ref;
        }
        else
        {
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'initial_ref' using DEFAULT value:" << m_initial_ref;
        }
        prop_check.unput("initial_ref");
    }

    //Parser of parameter group3::subgroup1::param_1
    {
        yarp::os::Bottle sectionp0;
        sectionp0 = config.findGroup("group3");
        yarp::os::Bottle sectionp;
        sectionp = sectionp0.findGroup("subgroup1");
        if (sectionp.check("param_1"))
        {
            m_group3_subgroup1_param_1 = sectionp.find("param_1").asBool();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group3::subgroup1::param_1' using value:" << m_group3_subgroup1_param_1;
        }
        else
        {
            yCError(TestDeviceWGPParamsCOMPONENT) << "Mandatory parameter 'group3::subgroup1::param_1' not found!";
            yCError(TestDeviceWGPParamsCOMPONENT) << "Description of the parameter: This is a parameter for testing purposes";
            return false;
        }
        prop_check.unput("group3::subgroup1::param_1");
    }

    //Parser of parameter group3::subgroup1::param_2
    {
        yarp::os::Bottle sectionp0;
        sectionp0 = config.findGroup("group3");
        yarp::os::Bottle sectionp;
        sectionp = sectionp0.findGroup("subgroup1");
        if (sectionp.check("param_2"))
        {
            m_group3_subgroup1_param_2 = sectionp.find("param_2").asBool();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group3::subgroup1::param_2' using value:" << m_group3_subgroup1_param_2;
        }
        else
        {
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group3::subgroup1::param_2' using DEFAULT value:" << m_group3_subgroup1_param_2;
        }
        prop_check.unput("group3::subgroup1::param_2");
    }

    //Parser of parameter group3::param_3
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("group3");
        if (sectionp.check("param_3"))
        {
            m_group3_param_3 = sectionp.find("param_3").asBool();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group3::param_3' using value:" << m_group3_param_3;
        }
        else
        {
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group3::param_3' using DEFAULT value:" << m_group3_param_3;
        }
        prop_check.unput("group3::param_3");
    }

    //Parser of parameter group3::subgroup2::param_4
    {
        yarp::os::Bottle sectionp0;
        sectionp0 = config.findGroup("group3");
        yarp::os::Bottle sectionp;
        sectionp = sectionp0.findGroup("subgroup2");
        if (sectionp.check("param_4"))
        {
            m_group3_subgroup2_param_4 = sectionp.find("param_4").asBool();
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group3::subgroup2::param_4' using value:" << m_group3_subgroup2_param_4;
        }
        else
        {
            yCInfo(TestDeviceWGPParamsCOMPONENT) << "Parameter 'group3::subgroup2::param_4' using DEFAULT value:" << m_group3_subgroup2_param_4;
        }
        prop_check.unput("group3::subgroup2::param_4");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(TestDeviceWGPParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(TestDeviceWGPParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      TestDeviceWGP_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: TestDeviceWGP\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'file_name': The name of the file written by the module\n");
    doc = doc + std::string("'mode': This fake parameter chooses the fake algorithm to be used\n");
    doc = doc + std::string("'add_marker': Some description of param.\n");
    doc = doc + std::string("'group1::param_a': Some description of param.\n");
    doc = doc + std::string("'group2::param_a': Some description of param.\n");
    doc = doc + std::string("'period': Algorithm control loop period\n");
    doc = doc + std::string("'initial_ref': An initial value for the algorithm\n");
    doc = doc + std::string("'group3::subgroup1::param_1': This is a parameter for testing purposes\n");
    doc = doc + std::string("'group3::subgroup1::param_2': This is a parameter for testing purposes\n");
    doc = doc + std::string("'group3::param_3': This is a parameter for testing purposes\n");
    doc = doc + std::string("'group3::subgroup2::param_4': This is a parameter for testing purposes\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device TestDeviceWGP --file_name audio_out.wav --mode mode1 --add_marker false --group1::param_a false --group2::param_a false --period <mandatory_value> --initial_ref 3 --group3::subgroup1::param_1 false --group3::subgroup1::param_2 true --group3::param_3 false --group3::subgroup2::param_4 true\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device TestDeviceWGP --file_name audio_out.wav --period <mandatory_value> --group3::subgroup1::param_1 false\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
